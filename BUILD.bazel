# Add rules here to build your software
# See https://docs.bazel.build/versions/master/build-ref.html#BUILD_files

# Allow any ts_library rules in this workspace to reference the config
# Note: if you move the tsconfig.json file to a subdirectory, you can add an alias() here instead
#   so that ts_library rules still use it by default.
#   See https://www.npmjs.com/package/@bazel/typescript#installation

load("@bazel_gazelle//:def.bzl", "gazelle")
load("@bazel_skylib//rules:native_binary.bzl", "native_test")
load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@npm//:renovate/package_json.bzl", "bin")
load("//bzl:rules.bzl", "bazel_lint")
load("//js:rules.bzl", "copy_to_bin", "js_library")
load("//ts:rules.bzl", "ts_config")

package(default_visibility = [":__subpackages__"])

# Useful commands to run!
alias(
    name = "fix",
    actual = "//bzl:fix",
)

alias(
    name = "pnpm",
    # bazel run -- //:pnpm --dir $PWD
    actual = "@pnpm//:pnpm",
)

buildifier(
    name = "buildifier",
)

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
)

js_library(
    name = "base_defs",
    srcs = ["Global.d.ts"],
)

exports_files(
    [
        ".prettierrc.json",
        "package.json",
        ".gitignore",
        ".editorconfig",
        "css_loader.d.ts",
        ".git",
        "jsconfig.json",
    ],
    visibility = ["//visibility:public"],
)

copy_to_bin(
    name = "swcrc",
    srcs = [".swcrc.json"],
    visibility = ["//visibility:public"],
)

copy_to_bin(
    name = "prettierrc",
    srcs = [".prettierrc.json"],
)

copy_to_bin(
    name = "gitignore",
    srcs = [".gitignore"],
)

copy_to_bin(
    name = "editorconfig",
    srcs = [".editorconfig"],
)

copy_to_bin(
    name = "package_json",
    srcs = ["package.json"],
)

bin.renovate_config_validator_test(
    name = "validate_renovate_config_test",
    args = ["$(location renovate.json)"],
    data = ["renovate.json"],
)

npm_link_all_packages(name = "node_modules")

# gazelle:prefix github.com/zemn-me/monorepo
# gazelle:map_kind go_binary go_binary //go:rules.bzl
# gazelle:map_kind go_library go_library //go:rules.bzl
# gazelle:map_kind ts_project ts_project //ts:rules.bzl
# gazelle:resolve proto go google/protobuf/struct.proto @com_github_golang_protobuf//ptypes/struct:struct
gazelle(
    name = "gazelle-update-repos",
    args = [
        "-from_file=go.mod",
        "-prune",
        "-to_macro=bzl/go_deps.bzl%go_dependencies",
    ],
    command = "update-repos",
)

gazelle(
    name = "gazelle",
    command = "fix",
)

native_test(
    name = "go_versions_synced",
    size = "small",
    src = "//go/cmd/version_sync",
    out = "version_sync_test.o",
    data = [
        "go.mod",
        "go_version.bzl",
    ],
)

sh_binary(
    name = "go_versions_synced.fix",
    srcs = ["fix_go_version_sync.sh"],
    data = [
        "//go/cmd/version_sync",
    ],
    env = {
        "VERSION_SYNC": "$(rlocationpath //go/cmd/version_sync)",
    },
    deps = [
        "@bazel_tools//tools/bash/runfiles",
    ],
)

js_library(
    name = "eslintrc",
    srcs = [
        ":eslint.config.cjs",
        "//:editorconfig",
        "//:prettierrc",
        "//:tsconfig",
    ],
    deps = [
		"//:node_modules/@eslint/js",
		"//:node_modules/typescript-eslint",
        "//:node_modules/@next/eslint-plugin-next",
        "//:node_modules/eslint-config-prettier",
        "//:node_modules/eslint-mdx",
        "//:node_modules/eslint-plugin-mdx",
        "//:node_modules/eslint-plugin-prettier",
        "//:node_modules/eslint-plugin-react",
        "//:node_modules/eslint-plugin-react-hooks",
        "//:node_modules/eslint-plugin-simple-import-sort",
    ],
)

bazel_lint(name = "bazel_lint")
