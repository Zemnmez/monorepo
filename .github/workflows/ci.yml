name: CI
concurrency: 
  group: concurrency-${{ github.head_ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  automerge:
    name: Auto-merge
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: 'Merge (if dependabot)'
      run: gh pr merge versioned --auto --merge
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  Test:
    # This runs on both push and PR â€“ for 
    # PR, we need to ensure tests pass,
    # but a PR cannot save a cache due to
    # security issues. Therefore, we run
    # post merge to create a cache that
    # can be picked up by future PRs.
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Restore bazel cache
        uses: actions/cache@v3.0.3
        env:
          cache-name: bazel-cache
        with:
          path: |
            ~/.cache/bazelisk
            ~/.cache/bazel
          key: ${{ runner.os }}-${{ env.cache-name }}
      - name: All tests
        # Use npx to try to generate only
        # bazel generated node_modules
        run: bazelisk test //...

  TestForMergeToVersioned:
    # This runs just the tests that are specified not to run on main
    if: github.ref == 'refs/heads/versioned'
    name: Tests (for merging into versioned branch)
    runs-on: ubuntu-latest
    needs: Test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Restore bazel cache
        uses: actions/cache@v3.0.3
        env:
          cache-name: bazel-cache
        with:
          path: |
            ~/.cache/bazelisk
            ~/.cache/bazel
          key: ${{ runner.os }}-${{ env.cache-name }}
      - name: All tests
        run: bazelisk test //... --test_tag_filters=do_not_run_on_main

  deployment:
    if: github.event_name == 'push' && github.ref == 'refs/heads/versioned'
    runs-on: ubuntu-latest
    needs: Test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Restore bazel cache
        uses: actions/cache@v3.0.3
        env:
          cache-name: bazel-cache
        with:
          path: |
            ~/.cache/bazelisk
            ~/.cache/bazel
          key: ${{ runner.os }}-${{ env.cache-name }}
      - name: Deploy
        # Use npx to try to generate only
        # bazel generated node_modules
        run: bazelisk run //deploy:deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_SECRET }}

  copy_to_versioned:
    name: Copy commits in main to versioned branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: Test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: ./.github/scripts/copy_to_versioned.sh
        shell: bash
  
