{
  "tweet": {
    "edit_info": {
      "initial": {
        "editTweetIds": [
          "1491894312887484438"
        ],
        "editableUntil": "2022-02-10T22:58:16.905Z",
        "editsRemaining": "5",
        "isEditEligible": true
      }
    },
    "retweeted": false,
    "source": "<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>",
    "entities": {
      "hashtags": [],
      "symbols": [],
      "user_mentions": [],
      "urls": []
    },
    "display_text_range": [
      "0",
      "251"
    ],
    "favorite_count": "3",
    "in_reply_to_status_id_str": "1491894312010874898",
    "id_str": "1491894312887484438",
    "in_reply_to_user_id": "601449312",
    "truncated": false,
    "retweet_count": "0",
    "id": "1491894312887484438",
    "in_reply_to_status_id": "1491894312010874898",
    "created_at": "Thu Feb 10 21:58:16 +0000 2022",
    "favorited": false,
    "full_text": "there’s no specific term for JNDI’s ‘loading remote binary objects’ functionality, nor is there, as far as I can tell, to disable it. Java just assumes anything that is abstracted as a filesystem should be able to remotely execute code on your machine",
    "lang": "en",
    "in_reply_to_screen_name": "zemnmez",
    "in_reply_to_user_id_str": "601449312"
  }
}