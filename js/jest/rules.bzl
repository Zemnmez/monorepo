"Shows how you might create a macro for the autogenerated Jest rule"

load("@npm//:jest-cli/package_json.bzl", jest = "bin")

def jest_test(name, srcs = [], data = [], deps = [], jest_config = "//:jest.ts.config.js", **kwargs):
    "A macro around the autogenerated jest_test rule"
    args = [
        "--no-cache",
        "--no-watchman",
        "--ci",
        "--colors",
    ]
    args.extend(["--config", "$(rootpath %s)" % jest_config])

    # Bazel already handles timeouts.
    args.extend(["--testTimeout", str(1000 * 60 * 5)])
    for src in srcs:
        args.extend(["--runTestsByPath", "$(rootpath %s)" % src])

    data = [jest_config, "//js:js_binary_deps"] + data + srcs + deps + ["//js/jest:jest_reporter"]

    jest.jest_test(
        name = name,
        data = data,
        args = args,
        node_options = [ "--experimental-vm-modules" ],
        **kwargs
    )

    # This rule is used specifically to update snapshots via `bazel run`
    jest.jest_binary(
        name = "%s.update" % name,
        data = data,
        args = args + ["-u"],
        **kwargs
    )
