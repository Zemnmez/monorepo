package module

import (
	"flag"
	"fmt"
	"path/filepath"
	"strings"

	"github.com/bazelbuild/bazel-gazelle/config"
	"github.com/bazelbuild/bazel-gazelle/label"
	"github.com/bazelbuild/bazel-gazelle/language"
	"github.com/bazelbuild/bazel-gazelle/repo"
	"github.com/bazelbuild/bazel-gazelle/resolve"
	"github.com/bazelbuild/bazel-gazelle/rule"
	"github.com/bazelbuild/buildtools/build"

	"github.com/zemn-me/monorepo/go/gazelle/js"
)

type Language struct{}

// Name returns the name of the language. This should be a prefix of the
// kinds of rules generated by the language, e.g., "go" for the Go extension
// since it generates "go_library" rules.
func (Language) Name() string { return "css_module" }

// RegisterFlags registers command-line flags used by the extension. This
// method is called once with the root configuration when Gazelle
// starts. RegisterFlags may set an initial values in Config.Exts. When flags
// are set, they should modify these values.
func (Language) RegisterFlags(fs *flag.FlagSet, cmd string, c *config.Config) {}

// CheckFlags validates the configuration after command line flags are parsed.
// This is called once with the root configuration when Gazelle starts.
// CheckFlags may set default values in flags or make implied changes.
func (Language) CheckFlags(fs *flag.FlagSet, c *config.Config) error { return nil }

// KnownDirectives returns a list of directive keys that this Configurer can
// interpret. Gazelle prints errors for directives that are not recoginized by
// any Configurer.
func (Language) KnownDirectives() []string { return []string{} }

// Configure modifies the configuration using directives and other information
// extracted from a build file. Configure is called in each directory.
//
// c is the configuration for the current directory. It starts out as a copy
// of the configuration for the parent directory.
//
// rel is the slash-separated relative path from the repository root to
// the current directory. It is "" for the root directory itself.
//
// f is the build file for the current directory or nil if there is no
// existing build file.
func (Language) Configure(c *config.Config, rel string, f *rule.File) {
	// we just inherit the JS config
}

// Imports returns a list of ImportSpecs that can be used to import the rule
// r. This is used to populate RuleIndex.
//
// If nil is returned, the rule will not be indexed. If any non-nil slice is
// returned, including an empty slice, the rule will be indexed.
func (this Language) Imports(c *config.Config, r *rule.Rule, f *rule.File) (specs []resolve.ImportSpec) {
	// import by the canonical absolute filepath

	for _, fn := range r.Attr("srcs").(*build.ListExpr).List {
		absPath := filepath.Join(f.Pkg, fn.(*build.StringExpr).Value)
		specs = append(specs, resolve.ImportSpec{
			Lang: this.Name(),
			Imp:  absPath,
		})

		for _, importSymbol := range c.Exts["javascript"].(js.PackageJsonPartial).ResolveJSModule(absPath) {
			fmt.Println("css", absPath, "can be imported as", importSymbol)
			specs = append(specs, resolve.ImportSpec{
				Lang: "javascript",
				Imp:  importSymbol,
			})
		}
	}

	return
}

var _ resolve.CrossResolver = Language{}

func (Language) CrossResolve(c *config.Config, ix *resolve.RuleIndex, spec resolve.ImportSpec, lang string) (result []resolve.FindResult) {
	// we can be imported kinda like js

	if spec.Lang == lang && lang == "javascript" {
		return ix.FindRulesByImportWithConfig(c, spec, "css_module")
	}

	return
}

// Embeds returns a list of labels of rules that the given rule embeds. If
// a rule is embedded by another importable rule of the same language, only
// the embedding rule will be indexed. The embedding rule will inherit
// the imports of the embedded rule.
func (Language) Embeds(r *rule.Rule, from label.Label) []label.Label { return nil }

const panic_instead_of_warn = false

const rule_name = "css_module"

// Resolve translates imported libraries for a given rule into Bazel
// dependencies. Information about imported libraries is returned for each
// rule generated by language.GenerateRules in
// language.GenerateResult.Imports. Resolve generates a "deps" attribute (or
// the appropriate language-specific equivalent) for each import according to
// language-specific rules and heuristics.
func (l Language) Resolve(c *config.Config, ix *resolve.RuleIndex, rc *repo.RemoteCache, r *rule.Rule, imports interface{}, from label.Label) {
	// no depsets yet.
}

// Kinds returns a map of maps rule names (kinds) and information on how to
// match and merge attributes that may be found in rules of those kinds. All
// kinds of rules generated for this language may be found here.
func (Language) Kinds() map[string]rule.KindInfo {
	return map[string]rule.KindInfo{
		rule_name: {
			MatchAttrs:    []string{"srcs"},
			NonEmptyAttrs: map[string]bool{},
			MergeableAttrs: map[string]bool{
				"srcs": true,
			},
		},
	}
}

// tsconfigByName returns true if the name of the
// file indiciates that it is a tsconfig file.
func isCSSModuleByFileName(name string) bool {
	return strings.HasSuffix(name, ".module.css")
}

// returns the rule name for given input src name.
func deriveRuleNameFromFileName(fileName string) string {
	return strings.Replace(fileName, ".", "_", -1)
}

// response struct of generateRule
type GenerateRuleResult struct {
	rule    *rule.Rule
	imports js.DepSet
}

type jsImportLister struct {
	importList [][]byte
}

func stringListToExprList(strings []string) (list build.ListExpr) {
	list.List = make([]build.Expr, len(strings))

	for i, str := range strings {
		list.List[i] = &build.StringExpr{Value: str}
	}

	return
}

// abstract version of GenerateRules that may return errors
func generateRules(args language.GenerateArgs) (result language.GenerateResult, err error) {
	var cssFiles []string = make([]string, 0, len(args.RegularFiles))

	for _, f := range args.RegularFiles {
		if !isCSSModuleByFileName(f) {
			continue
		}

		cssFiles = append(cssFiles, f)
	}

	if len(cssFiles) == 0 {
		return
	}

	r := rule.NewRule(
		/* kind: */ rule_name,
		/* name */ "css_module",
	)

	srcs := stringListToExprList(cssFiles)

	r.SetAttr("srcs", &srcs)

	result.Gen = append(result.Gen, r)
	result.Imports = append(result.Imports, struct{}{})

	return
}

// GenerateRules extracts build metadata from source files in a directory.
// GenerateRules is called in each directory where an update is requested
// in depth-first post-order.
//
// args contains the arguments for GenerateRules. This is passed as a
// struct to avoid breaking implementations in the future when new
// fields are added.
//
// A GenerateResult struct is returned. Optional fields may be added to this
// type in the future.
//
// Any non-fatal errors this function encounters should be logged using
// log.Print.
func (Language) GenerateRules(args language.GenerateArgs) (result language.GenerateResult) {
	var err error
	result, err = generateRules(args)
	if err != nil {
		panic(err)
	}

	return
}

// Loads returns .bzl files and symbols they define. Every rule generated by
// GenerateRules, now or in the past, should be loadable from one of these
// files.
//
// Deprecated: Implement ModuleAwareLanguage's ApparentLoads.
func (Language) Loads() []rule.LoadInfo {
	panic("Call ApparentLoads")
}

var _ language.ModuleAwareLanguage = Language{}

func (Language) ApparentLoads(moduleToApparentName func(string) string) []rule.LoadInfo {
	return []rule.LoadInfo{
		{
			Name:    "//css/module:rules.bzl",
			Symbols: []string{"css_module"},
		},
	}
}

// Fix repairs deprecated usage of language-specific rules in f. This is
// called before the file is indexed. Unless c.ShouldFix is true, fixes
// that delete or rename rules should not be performed.
func (Language) Fix(c *config.Config, f *rule.File) {
}

func NewLanguage() language.Language {
	return &Language{}
}
