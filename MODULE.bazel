###############################################################################
# Bazel now uses Bzlmod by default to manage external dependencies.
# Please consider migrating your external dependencies from WORKSPACE to MODULE.bazel.
#
# For more details, please check https://github.com/bazelbuild/bazel/issues/18958
###############################################################################

bazel_dep(name = "rules_oci", version = "2.2.0")
# For testing, we also recommend https://registry.bazel.build/modules/container_structure_test

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

# Declare external images you need to pull, for example:
oci.pull(
    name = "distroless_base",
    digest = "sha256:280852156756ea3f39f9e774a30346f2e756244e1f432aea3061c4ac85d90a66",
    image = "gcr.io/distroless/base",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
        "linux/arm/v7",
        "linux/s390x",
        "linux/ppc64le",
    ],
)

# For each oci.pull call, repeat the "name" here to expose them as dependencies.
use_repo(
    oci,
    "distroless_base",
    "distroless_base_linux_amd64",
    "distroless_base_linux_arm64_v8",
    "distroless_base_linux_arm_v7",
    "distroless_base_linux_ppc64le",
    "distroless_base_linux_s390x",
)

bazel_dep(name = "aspect_bazel_lib", version = "2.10.0")
bazel_dep(name = "bazel_skylib", version = "1.7.1")

bazel_dep(name = "bazel_skylib_gazelle_plugin", version = "1.7.1", dev_dependency = True)

bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_python", version = "1.0.0")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")

# renovate:
# 	datasource=python-version
# 	versioning=python
# 	depName=python
PYTHON_VERSION = "3.13"

python.toolchain(
    is_default = True,
    python_version = PYTHON_VERSION,
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = PYTHON_VERSION,
    requirements_lock = "//:requirements.txt",
)
use_repo(pip, "pip")

bazel_dep(name = "aspect_rules_swc", version = "2.2.0")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "aspect_rules_js", version = "2.1.2")

####### Node.js version #########
# By default you get the node version from DEFAULT_NODE_VERSION in @rules_nodejs//nodejs:repositories.bzl
# Optionally you can pin a different node version:
bazel_dep(name = "rules_nodejs", version = "6.3.2")
#node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")

#node.toolchain(node_version = "18.13.0")
#################################

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm", dev_dependency = True)
use_repo(pnpm, "pnpm")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    npmrc = "@@//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

bazel_dep(name = "aspect_rules_ts", version = "3.1.0")

rules_ts_ext = use_extension(
    "@aspect_rules_ts//ts:extensions.bzl",
    "ext",
    dev_dependency = True,
)
rules_ts_ext.deps(
    ts_version_from = "//:package.json",
)
use_repo(rules_ts_ext, "npm_typescript")

bazel_dep(name = "aspect_rules_lint", version = "0.21.0")
bazel_dep(name = "bazel_features", version = "1.23.0")
bazel_dep(name = "rules_go", version = "0.51.0", repo_name = "io_bazel_rules_go")
bazel_dep(name = "gazelle", version = "0.40.0", repo_name = "bazel_gazelle")

go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.22.7")
use_repo(
    go_sdk,
    "go_toolchains",
)

go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")

# regenerate with bazelisk mod tidy
use_repo(
    go_deps,
    "co_honnef_go_tools",
    "com_github_bazelbuild_bazel_watcher",
    "com_github_bazelbuild_buildtools",
    "com_github_go_delve_delve",
    "com_github_golang_protobuf",
    "com_github_google_go_containerregistry",
    "com_github_gorilla_websocket",
    "com_github_hashicorp_terraform_plugin_framework",
    "com_github_itchyny_gojq",
    "com_github_oapi_codegen_oapi_codegen_v2",
    "com_github_oapi_codegen_runtime",
    "com_github_sergi_go_diff",
    "com_github_tdewolff_parse_v2",
    "com_github_twilio_twilio_go",
    "com_github_xeipuuv_gojsonschema",
    "org_golang_x_sync",
    "org_golang_x_tools",
)

bazel_dep(name = "rules_python_gazelle_plugin", version = "1.0.0")
bazel_dep(name = "aspect_rules_py", version = "1.0.0")

go_deps_with_disabled_proto_generation = [
    "github.com/hashicorp/go-plugin",
]

[
    go_deps.gazelle_override(
        directives = [
            "gazelle:go_generate_proto false",
        ],
        path = path,
    )
    for path in go_deps_with_disabled_proto_generation
]

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "com_github_openai_openai_openapi",
    build_file_content = """exports_files(glob(["**/*"]))""",
    integrity = "sha256-P0PkXK8DEh56Z+S7dWMwxIpVxqmuDJTBuni5ZN/cSok=",
    strip_prefix = "openai-openapi-2577b8c9a889a61c1163075c2e71e3812d80aa83",
    url = "https://github.com/openai/openai-openapi/archive/2577b8c9a889a61c1163075c2e71e3812d80aa83.zip",
)

chromium_buildfile = """
load("@aspect_bazel_lib//lib:copy_to_bin.bzl", "copy_to_bin")
load("@bazel_skylib//rules:native_binary.bzl", "native_binary")

copy_to_bin(
name = "in_bin",
srcs = [ ":binary" ],
visibility = [ "//visibility:public" ]
)

native_binary(
name = "binary",
src = "chrome-linux64/chrome",
data = glob(["**/*"], ["chrome-linux64/chrome"]),
out = "chromium"
)
"""

http_archive(
    name = "com_googleapis_storage_chromium_linux_x64",
    build_file_content = chromium_buildfile,
    sha256 = "cc8ae96ccba9010425abf2481ecdca343d53623151e0b4f2c180f58ec55b66a4",
    url = "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/114.0.5735.90/linux64/chrome-linux64.zip",
)

http_archive(
    name = "com_github_factoriolab",
    build_file_content = """exports_files(glob(["**/*"]))""",
    integrity = "sha256-sr46XROs38AGASqEkUIKODVoLpDciRBRlJeNe+NvN2Q=",
    strip_prefix = "factoriolab-4ac80cb416e779819a73b871dd3e32ab7e0cda0c",
    url = "https://github.com/factoriolab/factoriolab/archive/4ac80cb416e779819a73b871dd3e32ab7e0cda0c.zip",
)

chromedriver_buildfile = """
load("@aspect_bazel_lib//lib:copy_to_bin.bzl", "copy_to_bin")

copy_to_bin(
name = "in_bin",
srcs = [ "chromedriver" ],
visibility = [ "//visibility:public" ]
)
"""

http_archive(
    name = "com_googleapis_storage_chromedriver_linux_x64",
    build_file_content = chromedriver_buildfile,
    sha256 = "a7787ef8b139170cab4abfca4a0284fd5d006bfd979624b4af25b64d583a6f44",
    url = "https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_linux64.zip",
)

http_archive(
    name = "com_googleapis_storage_chromedriver_mac64",
    build_file_content = chromedriver_buildfile,
    sha256 = "6abdc9d358c2bc4668bef7b23048de2a9dbd3ad82cfbc6dfe322e74d4cff1650",
    url = "https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_mac64.zip",
)

http_archive(
    name = "com_googleapis_storage_chromedriver_mac_arm64",
    build_file_content = chromedriver_buildfile,
    sha256 = "14eb3a1642a829fcbc11ef22e113b2f6a2340c4f4e235e5494b414c4834fa47c",
    url = "https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_mac_arm64.zip",
)

http_archive(
    name = "com_googleapis_storage_chromedriver_win32",
    build_file_content = chromedriver_buildfile,
    sha256 = "14eb3a1642a829fcbc11ef22e113b2f6a2340c4f4e235e5494b414c4834fa47c",
    url = "https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_mac_arm64.zip",
)

http_archive(
    name = "ffmpeg_linux_x64",
    build_file_content = """exports_files(glob(["**/*"]))""",
    sha256 = "2d848c37f7f276be0262d9123a84fbfe72bb159921ffcce3bd7106f143d29f42",
    strip_prefix = "ffmpeg-5.1.1-amd64-static",
    url = "https://www.johnvansickle.com/ffmpeg/old-releases/ffmpeg-5.1.1-amd64-static.tar.xz",
)

http_archive(
    name = "ffmpeg_linux_i686",
    build_file_content = """exports_files(glob(["**/*"]))""",
    sha256 = "df4ff17a39758f9e3af2aafe337f2661711161ebade6b20516110ed207c6a94e",
    strip_prefix = "ffmpeg-6.0-i686-static",
    url = "https://www.johnvansickle.com/ffmpeg/old-releases/ffmpeg-5.1.1-i686-static.tar.xz",
)

http_archive(
    name = "ffmpeg_linux_arm64",
    build_file_content = """exports_files(glob(["**/*"]))""",
    sha256 = "49f9beb7690afcbd4832d3577d9f0c87374d63c39cde5097dfd52d61b24b4855",
    strip_prefix = "ffmpeg-5.1.1-arm64-static",
    url = "https://www.johnvansickle.com/ffmpeg/old-releases/ffmpeg-5.1.1-arm64-static.tar.xz",
)

http_archive(
    name = "ffmpeg_macos_x64",
    build_file_content = """exports_files(glob(["**/*"]))""",
    sha256 = "9a810d222862a7230fd7035c91e32beb605af7501c3517580f2bc1eb8faddacc",
    url = "https://evermeet.cx/pub/ffmpeg/ffmpeg-6.0.zip",
)

http_archive(
    name = "ffmpeg_macos_arm64",
    build_file_content = """exports_files(glob(["**/*"]))""",
    sha256 = "15e67ff413d3d2436ddb3efd282344e50b8f1c6f834979b984371b90ebaf0449",
    url = "https://www.osxexperts.net/ffmpeg6arm.zip",
)

# Got no idea why but MS doesn't publish versions of this...
http_archive(
    name = "microsoft_json_schemas",
    build_file_content = """exports_files(glob(["**/*"]))""",
    sha256 = "d6a1a41601ebb98d85742756b2847eda1781caa29c46ca66b1b0fb4c55c23072",
    strip_prefix = "json-schemas-2b6ef3bfa6634bada05486040a36b81fccb23a24",
    url = "https://github.com/microsoft/json-schemas/archive/2b6ef3bfa6634bada05486040a36b81fccb23a24.zip",
)

http_file = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_file")

http_file(
    name = "org_iana_data_zone1970_tab",
    integrity = "sha256-3ANHICItrC0iU1vSQAMKZXN1a68sozBiy9AHi9ZGooE=",
    url = "https://data.iana.org/time-zones/tzdb/zone1970.tab",
)
