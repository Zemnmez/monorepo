package ts

import (
	"encoding/json"
	"errors"
	"flag"
	"fmt"
	"io"
	"os"
	"path"
	"path/filepath"
	"strings"

	"github.com/bazelbuild/bazel-gazelle/config"
	"github.com/bazelbuild/bazel-gazelle/label"
	"github.com/bazelbuild/bazel-gazelle/language"
	"github.com/bazelbuild/bazel-gazelle/repo"
	"github.com/bazelbuild/bazel-gazelle/resolve"
	"github.com/bazelbuild/bazel-gazelle/rule"
	"github.com/bazelbuild/buildtools/build"

	js "github.com/zemn-me/monorepo/go/gazelle/js"
	"github.com/zemn-me/monorepo/go/ts"
)

func demystifyJsonParseError(f *os.File, err error) error {
	var se *json.SyntaxError
	var ok bool
	if se, ok = err.(*json.SyntaxError); !ok {
		return err
	}

	const nContext = 10 // bytes
	start := se.Offset - nContext
	if start < 0 {
		start = 0
	}

	_, err = f.Seek(start, io.SeekStart)
	var context [nContext]byte

	n, err := f.Read(context[:])
	if err != nil {
		return err
	}

	contextSl := context[:n]

	return fmt.Errorf("%v ~ error near '%+s' (offset %d)", err, contextSl, se.Offset)
}

type Language struct{}

// Name returns the name of the language. This should be a prefix of the
// kinds of rules generated by the language, e.g., "go" for the Go extension
// since it generates "go_library" rules.
func (Language) Name() string { return "typescript" }

// RegisterFlags registers command-line flags used by the extension. This
// method is called once with the root configuration when Gazelle
// starts. RegisterFlags may set an initial values in Config.Exts. When flags
// are set, they should modify these values.
func (Language) RegisterFlags(fs *flag.FlagSet, cmd string, c *config.Config) {}

// CheckFlags validates the configuration after command line flags are parsed.
// This is called once with the root configuration when Gazelle starts.
// CheckFlags may set default values in flags or make implied changes.
func (Language) CheckFlags(fs *flag.FlagSet, c *config.Config) error { return nil }

// KnownDirectives returns a list of directive keys that this Configurer can
// interpret. Gazelle prints errors for directives that are not recoginized by
// any Configurer.
func (Language) KnownDirectives() []string { return []string{} }

// Configure modifies the configuration using directives and other information
// extracted from a build file. Configure is called in each directory.
//
// c is the configuration for the current directory. It starts out as a copy
// of the configuration for the parent directory.
//
// rel is the slash-separated relative path from the repository root to
// the current directory. It is "" for the root directory itself.
//
// f is the build file for the current directory or nil if there is no
// existing build file.
func (Language) Configure(c *config.Config, rel string, f *rule.File) {
	// we just inherit the JS config
}

func compiledFileName(tsFilePath string) string {
	if !(strings.HasSuffix(tsFilePath, "ts") || strings.HasSuffix(tsFilePath, "tsx")) {
		return tsFilePath
	}
	return strings.TrimSuffix(tsFilePath, filepath.Ext(tsFilePath)) + ".js"
}

func TsImportsForFileModule(pkg js.PackageJsonPartial, path string) (symbols []string) {
	return pkg.ResolveJSModule(
		compiledFileName(path),
	)
}

// Imports returns a list of ImportSpecs that can be used to import the rule
// r. This is used to populate RuleIndex.
//
// If nil is returned, the rule will not be indexed. If any non-nil slice is
// returned, including an empty slice, the rule will be indexed.
func (this Language) Imports(c *config.Config, r *rule.Rule, f *rule.File) (specs []resolve.ImportSpec) {
	var srcs *build.ListExpr
	var ok bool
	if srcs, ok = r.Attr("srcs").(*build.ListExpr); !ok {
		return
	}

	for _, src := range srcs.List {
		for _, importSymbol := range TsImportsForFileModule(c.Exts["javascript"].(js.PackageJsonPartial), path.Join(f.Pkg, src.(*build.StringExpr).Value)) {
			for _, lang := range []string{this.Name(), js.Language{}.Name()} {
				specs = append(specs, resolve.ImportSpec{
					Lang: lang,
					Imp:  importSymbol,
				})
			}
		}
	}

	return
}

// Embeds returns a list of labels of rules that the given rule embeds. If
// a rule is embedded by another importable rule of the same language, only
// the embedding rule will be indexed. The embedding rule will inherit
// the imports of the embedded rule.
func (Language) Embeds(r *rule.Rule, from label.Label) []label.Label { return nil }

const panic_instead_of_warn = true

func maybePanic(str string) {
	if panic_instead_of_warn {
		panic(str)
	}

	fmt.Println(str)
}

func FindRuleWithOverridePreference(c *config.Config, idx *resolve.RuleIndex, imp resolve.ImportSpec, lang string, from label.Label) (l label.Label, err error) {
	var errs []error
	var ok bool
	if l, ok = resolve.FindRuleWithOverride(c, imp, lang); ok {
		return
	}

	errs = append(errs, fmt.Errorf("Not present in override index: %s", imp.Imp))

	matches := idx.FindRulesByImportWithConfig(c, imp, lang)

	if len(matches) > 0 {
		l = matches[0].Label
		return
	}

	errs = append(errs, fmt.Errorf("Not present in import index: %s\n %+v", imp.Imp, idx))

	err = fmt.Errorf("in %s/%s: %v", from.Pkg, from.Name, errors.Join(errs...))

	return
}

func ResolveImportSetToTagList(c *config.Config, importSet []string, ix *resolve.RuleIndex, from label.Label) (l []build.Expr) {
	for _, s := range importSet {
		label, err := FindRuleWithOverridePreference(c, ix, resolve.ImportSpec{
			Lang: "javascript", Imp: s,
		}, "javascript", from)
		if err != nil {
			maybePanic(err.Error())
			continue
		}

		l = append(l, &build.StringExpr{
			Value: label.String(),
		})
	}

	return
}

// Resolve translates imported libraries for a given rule into Bazel
// dependencies. Information about imported libraries is returned for each
// rule generated by language.GenerateRules in
// language.GenerateResult.Imports. Resolve generates a "deps" attribute (or
// the appropriate language-specific equivalent) for each import according to
// language-specific rules and heuristics.
func (l Language) Resolve(c *config.Config, ix *resolve.RuleIndex, rc *repo.RemoteCache, r *rule.Rule, imports interface{}, from label.Label) {
	var importTags []build.Expr
	var assetTags []string

	if r.Kind() != "ts_project" {
		return
	}

	for dep := range imports.(js.DepSet) {
		builtin := js.ResolveNonLocalImportTags(c.Exts["javascript"].(js.PackageJsonPartial), dep, true)
		if len(builtin) > 0 {
			for _, tag := range builtin {
				importTags = append(importTags, &build.StringExpr{Value: tag})
			}
			continue
		}

		if !strings.HasSuffix(dep, ".js") {
			// must be asset if not module and not .js
			assetTags = append(assetTags, dep)
			continue
		}

		label, err := FindRuleWithOverridePreference(c, ix, resolve.ImportSpec{
			Lang: "javascript", Imp: dep,
		}, "javascript", from)
		if err != nil {
			maybePanic(err.Error())
			continue
		}

		importTags = append(importTags, &build.StringExpr{Value: label.String()})
	}

	if len(importTags) > 0 {
		r.SetAttr("deps", &build.ListExpr{
			List: importTags,
		})
	}

	if len(assetTags) > 0 {
		r.SetAttr("assets", ResolveImportSetToTagList(c, assetTags, ix, from))
	}
}

// Kinds returns a map of maps rule names (kinds) and information on how to
// match and merge attributes that may be found in rules of those kinds. All
// kinds of rules generated for this language may be found here.
func (Language) Kinds() map[string]rule.KindInfo {
	return map[string]rule.KindInfo{
		"ts_project": {
			MatchAttrs: []string{"srcs"},
			NonEmptyAttrs: map[string]bool{
				"srcs": true,
			},
			MergeableAttrs: map[string]bool{
				"srcs": true,
			},
			ResolveAttrs: map[string]bool{
				"deps":   true,
				"assets": true,
			},
		},
	}
}

// tsconfigByName returns true if the name of the
// file indiciates that it is a tsconfig file.
func isTsByFileName(name string) bool {
	return strings.HasSuffix(name, ".ts") || strings.HasSuffix(name, ".tsx")
}

// returns the rule name for given input src name.
func deriveRuleNameFromFileName(fileName string) string {
	return strings.Replace(fileName, ".", "_", -1)
}

// response struct of generateRule
type GenerateRuleResult struct {
	rule    *rule.Rule
	imports js.DepSet
}

type jsImportLister struct {
	importList [][]byte
}

func stringListToExprList(strings []string) (list build.ListExpr) {
	list.List = make([]build.Expr, len(strings))

	for i, str := range strings {
		list.List[i] = &build.StringExpr{Value: str}
	}

	return
}

// abstract version of GenerateRules that may return errors
func generateRules(args language.GenerateArgs) (result language.GenerateResult, err error) {
	var tsFiles []string = make([]string, 0, len(args.RegularFiles))

	for _, f := range args.RegularFiles {
		if !isTsByFileName(f) {
			continue
		}
		tsFiles = append(tsFiles, f)
	}

	if len(tsFiles) == 0 {
		return
	}

	for _, f := range tsFiles {
		deps := make(js.DepSet)
		var imports [][]byte
		imports, err = ts.ExtractImports(filepath.Join(args.Dir, f))
		if err != nil {
			return
		}

		if strings.HasSuffix(f, ".tsx") {
			imports = append(imports, []byte("@types/react"))
			imports = append(imports, []byte("react"))
		}

		for _, i := range imports {
			deps[string(i)] = true
		}

		r := rule.NewRule(
			/* kind: */ "ts_project",
			/* name */ deriveRuleNameFromFileName(f),
		)

		srcs := stringListToExprList([]string{f})

		r.SetAttr("srcs", &srcs)

		visibility := stringListToExprList([]string{
			"//:__subpackages__",
		})

		r.SetAttr("visibility", &visibility)

		result.Gen = append(result.Gen, r)
		result.Imports = append(result.Imports, deps)

		if strings.HasSuffix(f, "_test.ts") || strings.HasSuffix(f, "_test.tsx") {
			tr := rule.NewRule(
				"jest_test", deriveRuleNameFromFileName(f)+"_test")

			srcs := stringListToExprList([]string{
				compiledFileName(f),
			})

			tr.SetAttr("srcs", &srcs)

			deps := make(js.DepSet)

			deps["#root/"+filepath.Join(args.Dir, f)] = true

			result.Gen = append(result.Gen, tr)
			result.Imports = append(result.Imports, deps)

		}
	}

	return
}

// GenerateRules extracts build metadata from source files in a directory.
// GenerateRules is called in each directory where an update is requested
// in depth-first post-order.
//
// args contains the arguments for GenerateRules. This is passed as a
// struct to avoid breaking implementations in the future when new
// fields are added.
//
// A GenerateResult struct is returned. Optional fields may be added to this
// type in the future.
//
// Any non-fatal errors this function encounters should be logged using
// log.Print.
func (Language) GenerateRules(args language.GenerateArgs) (result language.GenerateResult) {
	var err error
	result, err = generateRules(args)
	if err != nil {
		panic(err)
	}

	return
}

// Loads returns .bzl files and symbols they define. Every rule generated by
// GenerateRules, now or in the past, should be loadable from one of these
// files.
//
// Deprecated: Implement ModuleAwareLanguage's ApparentLoads.
func (Language) Loads() []rule.LoadInfo {
	panic("Call ApparentLoads")
}

var _ language.ModuleAwareLanguage = Language{}

func (Language) ApparentLoads(moduleToApparentName func(string) string) []rule.LoadInfo {
	return []rule.LoadInfo{
		{
			Name:    "//ts:rules.bzl",
			Symbols: []string{"ts_lint", "ts_project", "jest_test"},
		},
	}
}

// Fix repairs deprecated usage of language-specific rules in f. This is
// called before the file is indexed. Unless c.ShouldFix is true, fixes
// that delete or rename rules should not be performed.
func (l Language) Fix(c *config.Config, f *rule.File) {
	for _, rule := range f.Rules {
		if rule.Kind() != "ts_project" {
			continue
		}

		if rule.Attr("srcs") != nil {
			continue
		}

		rule.Delete()
	}
}

func NewLanguage() language.Language {
	return &Language{}
}
