name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [released]

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    env:
      cache-name: cache1
      YARN_CACHE_FOLDER: yarn-cache-dir
      NODE_VERSION: 14
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Restore Cache
        uses: actions/cache@v2
        with:
          path: "yarn-cache-dir"
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: yarn install
      - run: yarn prepack
  automerge:
    name: Auto-merge
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    needs: test
>>>>>>> cd8aa31
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
<<<<<<< HEAD
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Fetch Dependabot metadata
      id: dependabot-metadata
      uses: dependabot/fetch-metadata@v1.3.3
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
    - name: 'Merge (if dependabot)'
      run: gh pr merge "$PR_URL" --auto --merge
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_URL: ${{ github.event.pull_request.html_url }}
  Test:
    # This runs on both push and PR â€“ for 
    # PR, we need to ensure tests pass,
    # but a PR cannot save a cache due to
    # security issues. Therefore, we run
    # post merge to create a cache that
    # can be picked up by future PRs.
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Restore bazel cache
        uses: actions/cache@v3.0.4
        env:
          cache-name: bazel-cache
        with:
          path: |
            ~/.cache/bazelisk
            ~/.cache/bazel
          key: ${{ runner.os }}-${{ env.cache-name }}
      - name: All tests
        # Use npx to try to generate only
        # bazel generated node_modules
        run: bazelisk test //...
  deployment:
    if: github.event_name == 'push' && github.ref == 'refs/heads/versioned'
    runs-on: ubuntu-latest
    needs: Test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          registry-url: 'https://registry.npmjs.org'
          node-version: '16'
      - name: Restore bazel cache
        uses: actions/cache@v3.0.4
        env:
          cache-name: bazel-cache
        with:
          path: |
            ~/.cache/bazelisk
            ~/.cache/bazel
          key: ${{ runner.os }}-${{ env.cache-name }}
      - name: Deploy
        # Use npx to try to generate only
        # bazel generated node_modules
        run: bazelisk run //deploy:deploy
        shell: bash
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_SECRET }}
=======
    - name: 'Merge (if dependabot)'
      uses: fastify/github-action-merge-dependabot@v1
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
  bump-version:
    # Every push should get a new synthetic version.
    name: Bump version
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: 'Checkout source code'
      uses: 'actions/checkout@v2'
      with:
        ref: ${{ github.ref }}
    - name: 'Version bump'
      uses: 'phips28/gh-action-bump-version@master'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag-prefix: 'v'
  publish:
    name: Yarn publish
    # When a push happens to a new version tag, upload it to yarn
    if: github.event_name == 'push'
    needs: test
    environment: publish
    runs-on: ubuntu-latest
    env:
      cache-name: cache1
      YARN_CACHE_FOLDER: yarn-cache-dir
      NODE_VERSION: 14
    steps:
      - uses: actions/checkout@v2
      # Setup .npmrc file to publish to npm
      - name: Restore Cache
        uses: actions/cache@v2
        with:
          path: "yarn-cache-dir"
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: yarn
      - run: yarn publish
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
