###############################################################################
# Bazel now uses Bzlmod by default to manage external dependencies.
# Please consider migrating your external dependencies from WORKSPACE to MODULE.bazel.
#
# For more details, please check https://github.com/bazelbuild/bazel/issues/18958
###############################################################################

bazel_dep(name = "rules_oci", version = "1.7.6")
# For testing, we also recommend https://registry.bazel.build/modules/container_structure_test

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

# Declare external images you need to pull, for example:
oci.pull(
    name = "distroless_base",
    digest = "sha256:280852156756ea3f39f9e774a30346f2e756244e1f432aea3061c4ac85d90a66",
    image = "gcr.io/distroless/base",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
        "linux/arm/v7",
        "linux/s390x",
        "linux/ppc64le",
    ],
)

# For each oci.pull call, repeat the "name" here to expose them as dependencies.
use_repo(
    oci,
    "distroless_base",
)

bazel_dep(name = "aspect_bazel_lib", version = "2.7.8")
bazel_dep(name = "bazel_skylib", version = "1.7.1")

bazel_dep(name = "bazel_skylib_gazelle_plugin", version = "1.7.1", dev_dependency = True)

bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_python", version = "0.34.0")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = "3.11",
    requirements_lock = "//:requirements.txt",
)
use_repo(pip, "pip")

bazel_dep(name = "aspect_rules_swc", version = "1.2.3")
bazel_dep(name = "rules_proto", version = "6.0.2")
bazel_dep(name = "aspect_rules_js", version = "1.42.3")

####### Node.js version #########
# By default you get the node version from DEFAULT_NODE_VERSION in @rules_nodejs//nodejs:repositories.bzl
# Optionally you can pin a different node version:
bazel_dep(name = "rules_nodejs", version = "6.2.0")
#node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")

#node.toolchain(node_version = "18.13.0")
#################################

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm", dev_dependency = True)
use_repo(pnpm, "pnpm")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    npmrc = "@@//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

bazel_dep(name = "aspect_rules_ts", version = "2.4.2")

rules_ts_ext = use_extension(
    "@aspect_rules_ts//ts:extensions.bzl",
    "ext",
    dev_dependency = True,
)
rules_ts_ext.deps(
    ts_version_from = "//:package.json",
)
use_repo(rules_ts_ext, "npm_typescript")

bazel_dep(name = "aspect_rules_lint", version = "0.21.0")
bazel_dep(name = "bazel_features", version = "1.13.0")
bazel_dep(name = "rules_go", version = "0.48.1", repo_name = "io_bazel_rules_go")
bazel_dep(name = "gazelle", version = "0.37.0", repo_name = "bazel_gazelle")

go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.22.2")
use_repo(
    go_sdk,
    "go_toolchains",
)

go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")

# regenerate with bazelisk mod tidy
use_repo(
    go_deps,
    "co_honnef_go_tools",
    "com_github_go_delve_delve",
    "com_github_golang_protobuf",
    "com_github_itchyny_gojq",
    "org_golang_x_tools",
)

bazel_dep(name = "rules_python_gazelle_plugin", version = "0.33.2")
