load("@com_github_benchsci_rules_nodejs_gazelle//:defs.bzl", "web_assets")

# Add rules here to build your software
# See https://docs.bazel.build/versions/master/build-ref.html#BUILD_files

# Allow any ts_library rules in this workspace to reference the config
# Note: if you move the tsconfig.json file to a subdirectory, you can add an alias() here instead
#   so that ts_library rules still use it by default.
#   See https://www.npmjs.com/package/@bazel/typescript#installation

load("@bazel_gazelle//:def.bzl", "gazelle", "gazelle_binary")
load("@bazel_skylib//rules:native_binary.bzl", "native_test")
load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@npm//:renovate/package_json.bzl", "bin")
load("@pip//:requirements.bzl", "all_whl_requirements")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python_gazelle_plugin//manifest:defs.bzl", "gazelle_python_manifest")
load("@rules_python_gazelle_plugin//modules_mapping:def.bzl", "modules_mapping")
load("//bzl:rules.bzl", "bazel_lint")
load("//js:rules.bzl", "copy_to_bin", "js_library")
load("//ts:rules.bzl", "ts_config", "ts_project")

package(default_visibility = [":__subpackages__"])

compile_pip_requirements(
    name = "requirements",
    src = "requirements.in",
    requirements_txt = "requirements.txt",
)

# Useful commands to run!
alias(
    name = "fix",
    actual = "//bzl:fix",
)

alias(
    name = "pnpm",
    # bazel run -- //:pnpm --dir $PWD
    actual = "@pnpm//:pnpm",
)

buildifier(
    name = "buildifier",
)

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
)

exports_files(
    [
        "ruff.toml",
        ".prettierrc.json",
        "package.json",
        ".gitignore",
        ".editorconfig",
        "css_loader.d.ts",
        ".git",
        "jsconfig.json",
    ],
    visibility = ["//visibility:public"],
)

copy_to_bin(
    name = "swcrc",
    srcs = [".swcrc.json"],
    visibility = ["//visibility:public"],
)

copy_to_bin(
    name = "prettierrc",
    srcs = [".prettierrc.json"],
)

copy_to_bin(
    name = "gitignore",
    srcs = [".gitignore"],
)

copy_to_bin(
    name = "editorconfig",
    srcs = [".editorconfig"],
)

copy_to_bin(
    name = "package_json",
    srcs = ["package.json"],
)

bin.renovate_config_validator_test(
    name = "validate_renovate_config_test",
    args = ["$(location renovate.json)"],
    data = ["renovate.json"],
)

npm_link_all_packages(name = "node_modules")

native_test(
    name = "go_versions_synced",
    size = "small",
    src = "//go/cmd/version_sync",
    out = "version_sync_test.o",
    data = [
        "MODULE.bazel",
        "go.mod",
    ],
)

sh_binary(
    name = "go_versions_synced.fix",
    srcs = ["fix_go_version_sync.sh"],
    data = [
        "//go/cmd/version_sync",
    ],
    env = {
        "VERSION_SYNC": "$(rlocationpath //go/cmd/version_sync)",
    },
    deps = [
        "@bazel_tools//tools/bash/runfiles",
    ],
)

# This rule fetches the metadata for python packages we depend on. That data is
# required for the gazelle_python_manifest rule to update our manifest file.
modules_mapping(
    name = "modules_map",
    wheels = all_whl_requirements,
)

# gazelle:resolve py google.protobuf @com_google_protobuf//:protobuf_python
# gazelle:map_kind py_binary py_binary //py:rules.bzl
# gazelle:map_kind py_library py_library //py:rules.bzl
# gazelle:map_kind py_test py_test //py:rules.bzl
# Gazelle python extension needs a manifest file mapping from
# an import to the installed package that provides it.
# This macro produces two targets:
# - //:gazelle_python_manifest.update can be used with `bazel run`
#   to recalculate the manifest
# - //:gazelle_python_manifest.test is a test target ensuring that
#   the manifest doesn't need to be updated
gazelle_python_manifest(
    name = "gazelle_python_manifest",
    modules_mapping = ":modules_map",
    # This is what we called our `pip_parse` rule, where third-party
    # python libraries are loaded in BUILD files.
    pip_repository_name = "pip",
    # This should point to wherever we declare our python dependencies
    # (the same as what we passed to the modules_mapping rule in WORKSPACE)
    # This argument is optional. If provided, the `.test` target is very
    # fast because it just has to check an integrity field. If not provided,
    # the integrity field is not added to the manifest which can help avoid
    # merge conflicts in large repos.
    requirements = "//:requirements.txt",
)

# this alias allows the gazelle python manifest fixer to conform to
# the fix api (bzl/fix_api).
alias(
    name = "gazelle_python_manifest.test.fix",
    actual = "gazelle_python_manifest.update",
)

# gazelle:exclude **/node_modules
# gazelle:exclude tsconfig.json

# gazelle:js_package_file package.json :node_modules
# gazelle:js_web_asset .json,.css,.scss
# gazelle:js_collect_all_assets
# gazelle:js_root
# gazelle:map_kind js_library js_library //js:rules.bzl
# gazelle:map_kind ts_project ts_project //ts:rules.bzl
# gazelle:js_import_alias #root .
gazelle_binary(
    name = "gazelle_bin",
    languages = [
        "@com_github_benchsci_rules_nodejs_gazelle//gazelle",
        "@rules_python_gazelle_plugin//python",
        "@bazel_gazelle//language/go",  # Built-in rule from gazelle for Golang.
        "@bazel_gazelle//language/proto",  # Built-in rule from gazelle for Protos.
        # Any languages that depend on Gazelle's proto plugin must come after it.
    ],
    visibility = ["//visibility:public"],
)

# gazelle:prefix github.com/zemn-me/monorepo
# gazelle:map_kind go_binary go_binary //go:rules.bzl
# gazelle:map_kind go_library go_library //go:rules.bzl
# gazelle:map_kind ts_project ts_project //ts:rules.bzl
# gazelle:resolve proto go google/protobuf/struct.proto @com_github_golang_protobuf//ptypes/struct:struct
gazelle(
    name = "gazelle-update-repos",
    args = [
        "-from_file=go.mod",
        "-prune",
        "-to_macro=bzl/go_deps.bzl%go_dependencies",
    ],
    command = "update-repos",
    gazelle = ":gazelle_bin",
)

gazelle(
    name = "gazelle",
    command = "fix",
    gazelle = ":gazelle_bin",
)

bazel_lint(name = "bazel_lint")

ts_project(
    name = "Global.d",
    srcs = ["Global.d.ts"],
)

js_library(
    name = "babel.config",
    srcs = ["babel.config.js"],
)

js_library(
    name = "eslint.config",
    srcs = ["eslint.config.js"],
    data = [
        "//:node_modules/@eslint/compat",
        "//:node_modules/@eslint/js",
        "//:node_modules/@next/eslint-plugin-next",
        "//:node_modules/eslint-plugin-mdx",
        "//:node_modules/eslint-plugin-react-hooks",
        "//:node_modules/typescript-eslint",
    ],
    deps = [
        "//:node_modules/@eslint/compat",
        "//:node_modules/@eslint/js",
        "//:node_modules/@next/eslint-plugin-next",
        "//:node_modules/eslint-plugin-mdx",
        "//:node_modules/eslint-plugin-react",
        "//:node_modules/eslint-plugin-react-hooks",
        "//:node_modules/eslint-plugin-simple-import-sort",
        "//:node_modules/typescript-eslint",
    ],
)

web_assets(
    name = "_bazel_fix_commands_json",
    srcs = [".bazel_fix_commands.json"],
)

web_assets(
    name = "_prettierrc_json",
    srcs = [".prettierrc.json"],
)

web_assets(
    name = "_swcrc_json",
    srcs = [".swcrc.json"],
)

web_assets(
    name = "cargo-bazel-lock_json",
    srcs = ["cargo-bazel-lock.json"],
)

web_assets(
    name = "jsx_tsconfig_json",
    srcs = ["jsx.tsconfig.json"],
)

web_assets(
    name = "node_tsconfig_json",
    srcs = ["node.tsconfig.json"],
)

web_assets(
    name = "renovate_json",
    srcs = ["renovate.json"],
)

web_assets(
    name = "rust-project_json",
    srcs = ["rust-project.json"],
)

web_assets(
    name = "all_assets",
    srcs = [
        "//:_bazel_fix_commands_json",
        "//:_prettierrc_json",
        "//:_swcrc_json",
        "//:cargo-bazel-lock_json",
        "//:jsx_tsconfig_json",
        "//:node_tsconfig_json",
        "//:renovate_json",
        "//:rust-project_json",
        "//.vscode:extensions_json",
        "//.vscode:settings_json",
        "//.vscode:tasks_json",
        "//css/lint:stylelint-config_json",
        "//project/ck3/base_game:log_settings_debug_json",
        "//project/ck3/base_game:log_settings_live_json",
        "//project/ck3/base_game:log_settings_release_json",
        "//project/ck3/base_game:manifest_json",
        "//project/ck3/base_game:mask_painter_meta_json",
        "//project/ck3/base_game/common/achievements:msgrdk_achievements_json",
        "//project/ck3/base_game/tools:texture_converter_settings_json",
        "//project/ck3/base_game/tools/mapeditor:auto_nudger_settings_json",
        "//project/ck3/base_game/tools/mapeditor:nudger_settings_json",
        "//project/ck3/base_game/tools/mapeditor/mask_painter:mask_painter_meta_json",
        "//project/cultist/react:table_module_css",
        "//project/linear2/features/elements/garamond:index_css",
        "//project/linear2/features/elements/timeline:style_module_css",
        "//project/zemn.me/app:base_css",
        "//project/zemn.me/app:not-found_module_css",
        "//project/zemn.me/app:style_module_css",
        "//project/zemn.me/app/experiments/cultist:Home_module_css",
        "//project/zemn.me/app/experiments/cultist:globals_css",
        "//project/zemn.me/app/experiments/emoji/flag:style_module_css",
        "//project/zemn.me/components/Article:style_module_css",
        "//project/zemn.me/components/DividerHeading:index_module_css",
        "//project/zemn.me/components/Glade:style_module_css",
        "//project/zemn.me/components/HeroVideo:style_module_css",
        "//project/zemn.me/components/Prose:prose_module_css",
        "//project/zemn.me/components/SectionLink:SectionLink_module_css",
        "//project/zemn.me/components/TimeEye:TimeEye_module_css",
        "//project/zemn.me/components/ZemnmezLogo:ZemnmezLogo_module_css",
        "//project/zemn.me/components/timeline:timeline_module_css",
        "//ts/cmd/svgshot:package_template_json",
        "//ts/do-sync:package_template_json",
        "//ts/knowitwhenyouseeit:package_template_json",
        "//ts/math/scale:tsconfig_json",
        "//ts/pulumi/pleaseintroducemetoyour.dog/app:base_css",
        "//ts/pulumi/zemn.me/availability/pages:base_css",
        "//ts/react/element/loading:loading_module_css",
    ],
)
