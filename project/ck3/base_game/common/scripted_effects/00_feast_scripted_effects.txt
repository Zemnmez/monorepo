
#Effects used in Feasts

#feast_end_guest_effect - Effect run for all guests when they leave feasts

feast_concluded_my_events_effect = {
	save_temporary_scope_as = finished_participant
	scope:activity = {
		add_to_variable_list = {
			name = finished_participants
			target = scope:finished_participant
		}
	}
}

feast_fire_correct_default_event_effect = {
	if = {
		limit = {
			this = scope:activity.activity_owner
		}
		trigger_event = {
			on_action = feast_default_host_event_selection
			days = { min_feast_event_spacing max_feast_event_spacing }
		}
	}
	else = {
		trigger_event = {
			on_action = feast_default_event_selection
			days = { min_feast_event_spacing max_feast_event_spacing }
		}
	}
}

feast_wrap_up_or_fire_random_event_effect = {
	if = {
		limit = {
			NOT = { exists = local_var:num_of_feast_events }
		}
		set_local_variable = {
			name = num_of_feast_events
			value = 1
		}
		feast_fire_correct_default_event_effect = yes
	}
	else = {
		change_local_variable = {
			name = num_of_feast_events
			add = 1
		}
		if = {
			limit = { # Check the number of events fired
				local_var:num_of_feast_events < max_default_feast_events
			}
			# If below the max number check whether to fire more
			if = {
				limit = {
					local_var:num_of_feast_events >= min_default_feast_events
				}
				random_list = {
					0 = {
						modifier = { add = chance_of_extra_feast_events }
						feast_fire_correct_default_event_effect = yes
					}
					100 = {
						modifier = {
							add = {
								subtract = chance_of_extra_feast_events
							}
						}
						feast_concluded_my_events_effect = yes
					}
				}
			}
			else = {
				feast_fire_correct_default_event_effect = yes
			}
		}
		else = {
			feast_concluded_my_events_effect = yes
		}
	}
}

feast_end_guest_effect = {
	# Only called on the end of a *successful* feast. Feasts which are interrupted due to death, imprisonment, etc., don't get this, so put critical clean-up stuff in the activity itself.
	reveler_lifestyle_rank_up_check_effect = yes
	stress_impact = {
		base = medium_stress_loss
		gluttonous = medium_stress_impact_loss
		gregarious = medium_stress_impact_loss
		shy = medium_stress_impact_gain
	}
}

add_hosted_feast_modifier_towards_character = {
	if = {
		limit = {
			$CHARACTER$ = {
				employs_court_position = court_musician_court_position
				any_court_position_holder = {
					type = court_musician_court_position
					is_physically_able = yes
				}
			}
		}
		if = {
			limit = { # Increase the bonus slightly if musician's culture has Musicical Theorists
				$CHARACTER$ = {
					any_court_position_holder = {
						type = court_musician_court_position
						culture = { has_cultural_parameter = characters_are_better_court_musicians }
					}
				}
			}
			add_opinion = {
				target = $CHARACTER$
				modifier = feast_hosted_successful_feast_with_music
				opinion = 35
			}
		}
		else = {
			add_opinion = {
				target = $CHARACTER$
				modifier = feast_hosted_successful_feast_with_music
			}
		}
	}
	else = {
		add_opinion = {
			target = $CHARACTER$
			modifier = feast_hosted_successful_feast
		}
	}
}

hosted_successful_feast_effect = {
	#Prestige gain from Food amenities
	if = {
		limit = {
			has_dlc_feature = royal_court
			has_royal_court = yes
		}
		add_prestige = ep1_feast_prestige_per_food_amenities_value
		#Prestige gain from Tradition
		if = {
			limit = {
				culture = {
					has_cultural_parameter = refined_feasts
				}
			}
			add_prestige = minor_prestige_gain
		}
	}
	#Prestige gain from Tradition
	else_if = {
		limit = {
			culture = {
				has_cultural_parameter = refined_feasts
			}
		}
		add_prestige = major_prestige_gain
	}
	else = {
		add_prestige = medium_prestige_gain
	}
	if = {
		limit = {
			culture = {
				has_cultural_parameter = renown_from_feasts
			}
			exists = dynasty
		}
		dynasty = {
			add_dynasty_prestige = minor_dynasty_prestige_value
		}
	}
	scope:activity = {
		every_participant = {
			limit = { NOT = { this = root } }
			custom = every_guest_scope_tt
			add_hosted_feast_modifier_towards_character = { CHARACTER = root }
		}
	}
	reveler_lifestyle_rank_up_check_effect = yes
	hidden_effect = {
		if = {
			limit = { exists = scope:spouse }
			add_opinion = { #Your opinion of your Spouse increases, considering they did most of the work
				target = scope:spouse
				modifier = feast_spouse_hosted_successful_feast_opinion
			}
		}
	}
}

hosted_successful_feast_interrupted_effect = {
	add_prestige = medium_prestige_gain
	every_in_list = {
		list = feast_participants
		custom = every_guest_scope_tt
		add_hosted_feast_modifier_towards_character = { CHARACTER = scope:host }
	}
	reveler_lifestyle_rank_up_check_effect = yes
	hidden_effect = {
		if = {
			limit = { exists = scope:spouse }
			add_opinion = { #Your opinion of your Spouse increases, considering they did most of the work
				target = scope:spouse
				modifier = feast_spouse_hosted_successful_feast_opinion
			}
		}
	}
}
